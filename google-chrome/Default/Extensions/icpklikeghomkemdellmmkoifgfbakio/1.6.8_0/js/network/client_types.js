//
// Autogenerated by Thrift Compiler (0.20.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import {Thrift} from "./thrift.js";

if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}

export let Communication;

if (typeof Communication === 'undefined') {
  Communication = {};
}
if (typeof module !== 'undefined' && module.exports) {
  module.exports.Communication = Communication;
}
if (typeof Communication.Client === 'undefined') {
  Communication.Client = {};
}
if (typeof module !== 'undefined' && module.exports) {
  module.exports.Communication.Client = Communication.Client;
}
Communication.Client.ServiceType = {
  'anonymox' : 1,
  'tor' : 2,
  'jondo' : 3,
  'i2p' : 4
};
Communication.Client.ExternalInfo = class {
  constructor(args) {
    this.ip = null;
    this.country = null;
    if (args) {
      if (args.ip !== undefined && args.ip !== null) {
        this.ip = args.ip;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ip = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExternalInfo');
    if (this.ip !== null && this.ip !== undefined) {
      output.writeFieldBegin('ip', Thrift.Type.STRING, 1);
      output.writeString(this.ip);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 2);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.Attributes = class {
  constructor(args) {
    this.stealth = null;
    this.premium = null;
    this.fast = null;
    if (args) {
      if (args.stealth !== undefined && args.stealth !== null) {
        this.stealth = args.stealth;
      }
      if (args.premium !== undefined && args.premium !== null) {
        this.premium = args.premium;
      }
      if (args.fast !== undefined && args.fast !== null) {
        this.fast = args.fast;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.stealth = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.premium = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.fast = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Attributes');
    if (this.stealth !== null && this.stealth !== undefined) {
      output.writeFieldBegin('stealth', Thrift.Type.BOOL, 1);
      output.writeBool(this.stealth);
      output.writeFieldEnd();
    }
    if (this.premium !== null && this.premium !== undefined) {
      output.writeFieldBegin('premium', Thrift.Type.BOOL, 2);
      output.writeBool(this.premium);
      output.writeFieldEnd();
    }
    if (this.fast !== null && this.fast !== undefined) {
      output.writeFieldBegin('fast', Thrift.Type.BOOL, 3);
      output.writeBool(this.fast);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.GPSCoord = class {
  constructor(args) {
    this.lat = null;
    this.long = null;
    if (args) {
      if (args.lat !== undefined && args.lat !== null) {
        this.lat = args.lat;
      }
      if (args.long !== undefined && args.long !== null) {
        this.long = args.long;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.DOUBLE) {
          this.lat = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.long = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GPSCoord');
    if (this.lat !== null && this.lat !== undefined) {
      output.writeFieldBegin('lat', Thrift.Type.DOUBLE, 1);
      output.writeDouble(this.lat);
      output.writeFieldEnd();
    }
    if (this.long !== null && this.long !== undefined) {
      output.writeFieldBegin('long', Thrift.Type.DOUBLE, 2);
      output.writeDouble(this.long);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.Gateway = class {
  constructor(args) {
    this.id = null;
    this.ip = null;
    this.port = null;
    this.type = null;
    this.usageIndex = null;
    this.country = null;
    this.attributes = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.ip !== undefined && args.ip !== null) {
        this.ip = args.ip;
      }
      if (args.port !== undefined && args.port !== null) {
        this.port = args.port;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.usageIndex !== undefined && args.usageIndex !== null) {
        this.usageIndex = args.usageIndex;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.attributes !== undefined && args.attributes !== null) {
        this.attributes = Thrift.copyList(args.attributes, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ip = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.port = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.usageIndex = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.attributes = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readString().value;
            this.attributes.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Gateway');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.ip !== null && this.ip !== undefined) {
      output.writeFieldBegin('ip', Thrift.Type.STRING, 2);
      output.writeString(this.ip);
      output.writeFieldEnd();
    }
    if (this.port !== null && this.port !== undefined) {
      output.writeFieldBegin('port', Thrift.Type.I32, 3);
      output.writeI32(this.port);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 4);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.usageIndex !== null && this.usageIndex !== undefined) {
      output.writeFieldBegin('usageIndex', Thrift.Type.I32, 5);
      output.writeI32(this.usageIndex);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 6);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
      output.writeFieldBegin('attributes', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
      for (let iter4 in this.attributes) {
        if (this.attributes.hasOwnProperty(iter4)) {
          iter4 = this.attributes[iter4];
          output.writeString(iter4);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.Gateway2 = class {
  constructor(args) {
    this.id = null;
    this.ip = null;
    this.port = null;
    this.type = null;
    this.usageIndex = null;
    this.country = null;
    this.attributes = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.ip !== undefined && args.ip !== null) {
        this.ip = args.ip;
      }
      if (args.port !== undefined && args.port !== null) {
        this.port = args.port;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.usageIndex !== undefined && args.usageIndex !== null) {
        this.usageIndex = args.usageIndex;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.attributes !== undefined && args.attributes !== null) {
        this.attributes = new Communication.Client.Attributes(args.attributes);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ip = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.port = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.usageIndex = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.attributes = new Communication.Client.Attributes();
          this.attributes.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Gateway2');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.ip !== null && this.ip !== undefined) {
      output.writeFieldBegin('ip', Thrift.Type.STRING, 2);
      output.writeString(this.ip);
      output.writeFieldEnd();
    }
    if (this.port !== null && this.port !== undefined) {
      output.writeFieldBegin('port', Thrift.Type.I32, 3);
      output.writeI32(this.port);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 4);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.usageIndex !== null && this.usageIndex !== undefined) {
      output.writeFieldBegin('usageIndex', Thrift.Type.I32, 5);
      output.writeI32(this.usageIndex);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 6);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
      output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 7);
      this.attributes.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.Gateway3 = class {
  constructor(args) {
    this.id = null;
    this.ip = null;
    this.port = null;
    this.type = null;
    this.usageIndex = null;
    this.country = null;
    this.attributes = null;
    this.tls = null;
    this.tlsHostname = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.ip !== undefined && args.ip !== null) {
        this.ip = args.ip;
      }
      if (args.port !== undefined && args.port !== null) {
        this.port = args.port;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.usageIndex !== undefined && args.usageIndex !== null) {
        this.usageIndex = args.usageIndex;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.attributes !== undefined && args.attributes !== null) {
        this.attributes = new Communication.Client.Attributes(args.attributes);
      }
      if (args.tls !== undefined && args.tls !== null) {
        this.tls = args.tls;
      }
      if (args.tlsHostname !== undefined && args.tlsHostname !== null) {
        this.tlsHostname = args.tlsHostname;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ip = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.port = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.usageIndex = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.attributes = new Communication.Client.Attributes();
          this.attributes.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.tls = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.tlsHostname = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Gateway3');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.ip !== null && this.ip !== undefined) {
      output.writeFieldBegin('ip', Thrift.Type.STRING, 2);
      output.writeString(this.ip);
      output.writeFieldEnd();
    }
    if (this.port !== null && this.port !== undefined) {
      output.writeFieldBegin('port', Thrift.Type.I32, 3);
      output.writeI32(this.port);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 4);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.usageIndex !== null && this.usageIndex !== undefined) {
      output.writeFieldBegin('usageIndex', Thrift.Type.I32, 5);
      output.writeI32(this.usageIndex);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 6);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
      output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 7);
      this.attributes.write(output);
      output.writeFieldEnd();
    }
    if (this.tls !== null && this.tls !== undefined) {
      output.writeFieldBegin('tls', Thrift.Type.BOOL, 8);
      output.writeBool(this.tls);
      output.writeFieldEnd();
    }
    if (this.tlsHostname !== null && this.tlsHostname !== undefined) {
      output.writeFieldBegin('tlsHostname', Thrift.Type.STRING, 9);
      output.writeString(this.tlsHostname);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.FundingInfo = class {
  constructor(args) {
    this.frameURL = null;
    this.everyXPageChange = null;
    if (args) {
      if (args.frameURL !== undefined && args.frameURL !== null) {
        this.frameURL = args.frameURL;
      }
      if (args.everyXPageChange !== undefined && args.everyXPageChange !== null) {
        this.everyXPageChange = args.everyXPageChange;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.frameURL = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.everyXPageChange = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FundingInfo');
    if (this.frameURL !== null && this.frameURL !== undefined) {
      output.writeFieldBegin('frameURL', Thrift.Type.STRING, 1);
      output.writeString(this.frameURL);
      output.writeFieldEnd();
    }
    if (this.everyXPageChange !== null && this.everyXPageChange !== undefined) {
      output.writeFieldBegin('everyXPageChange', Thrift.Type.I32, 2);
      output.writeI32(this.everyXPageChange);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.AdBoxInfo = class {
  constructor(args) {
    this.frameURL = null;
    this.pageChangesPerAd = null;
    if (args) {
      if (args.frameURL !== undefined && args.frameURL !== null) {
        this.frameURL = args.frameURL;
      }
      if (args.pageChangesPerAd !== undefined && args.pageChangesPerAd !== null) {
        this.pageChangesPerAd = args.pageChangesPerAd;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.frameURL = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.pageChangesPerAd = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AdBoxInfo');
    if (this.frameURL !== null && this.frameURL !== undefined) {
      output.writeFieldBegin('frameURL', Thrift.Type.STRING, 1);
      output.writeString(this.frameURL);
      output.writeFieldEnd();
    }
    if (this.pageChangesPerAd !== null && this.pageChangesPerAd !== undefined) {
      output.writeFieldBegin('pageChangesPerAd', Thrift.Type.I32, 2);
      output.writeI32(this.pageChangesPerAd);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.Info = class {
  constructor(args) {
    this.gateways = null;
    this.showURL = null;
    this.externalInfo = null;
    this.premium = null;
    this.funding = null;
    this.forceUpgradeVersion = null;
    this.throttledReminderIntervalMin = null;
    this.showPremiumInfoParts = null;
    this.statusUri = null;
    if (args) {
      if (args.gateways !== undefined && args.gateways !== null) {
        this.gateways = Thrift.copyList(args.gateways, [Communication.Client.Gateway]);
      }
      if (args.showURL !== undefined && args.showURL !== null) {
        this.showURL = args.showURL;
      }
      if (args.externalInfo !== undefined && args.externalInfo !== null) {
        this.externalInfo = new Communication.Client.ExternalInfo(args.externalInfo);
      }
      if (args.premium !== undefined && args.premium !== null) {
        this.premium = args.premium;
      }
      if (args.funding !== undefined && args.funding !== null) {
        this.funding = new Communication.Client.FundingInfo(args.funding);
      }
      if (args.forceUpgradeVersion !== undefined && args.forceUpgradeVersion !== null) {
        this.forceUpgradeVersion = args.forceUpgradeVersion;
      }
      if (args.throttledReminderIntervalMin !== undefined && args.throttledReminderIntervalMin !== null) {
        this.throttledReminderIntervalMin = args.throttledReminderIntervalMin;
      }
      if (args.showPremiumInfoParts !== undefined && args.showPremiumInfoParts !== null) {
        this.showPremiumInfoParts = args.showPremiumInfoParts;
      }
      if (args.statusUri !== undefined && args.statusUri !== null) {
        this.statusUri = args.statusUri;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.gateways = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new Communication.Client.Gateway();
            elem8.read(input);
            this.gateways.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.showURL = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.externalInfo = new Communication.Client.ExternalInfo();
          this.externalInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.premium = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.funding = new Communication.Client.FundingInfo();
          this.funding.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.forceUpgradeVersion = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.throttledReminderIntervalMin = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.showPremiumInfoParts = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.statusUri = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Info');
    if (this.gateways !== null && this.gateways !== undefined) {
      output.writeFieldBegin('gateways', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.gateways.length);
      for (let iter9 in this.gateways) {
        if (this.gateways.hasOwnProperty(iter9)) {
          iter9 = this.gateways[iter9];
          iter9.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.showURL !== null && this.showURL !== undefined) {
      output.writeFieldBegin('showURL', Thrift.Type.STRING, 3);
      output.writeString(this.showURL);
      output.writeFieldEnd();
    }
    if (this.externalInfo !== null && this.externalInfo !== undefined) {
      output.writeFieldBegin('externalInfo', Thrift.Type.STRUCT, 4);
      this.externalInfo.write(output);
      output.writeFieldEnd();
    }
    if (this.premium !== null && this.premium !== undefined) {
      output.writeFieldBegin('premium', Thrift.Type.BOOL, 5);
      output.writeBool(this.premium);
      output.writeFieldEnd();
    }
    if (this.funding !== null && this.funding !== undefined) {
      output.writeFieldBegin('funding', Thrift.Type.STRUCT, 6);
      this.funding.write(output);
      output.writeFieldEnd();
    }
    if (this.forceUpgradeVersion !== null && this.forceUpgradeVersion !== undefined) {
      output.writeFieldBegin('forceUpgradeVersion', Thrift.Type.STRING, 7);
      output.writeString(this.forceUpgradeVersion);
      output.writeFieldEnd();
    }
    if (this.throttledReminderIntervalMin !== null && this.throttledReminderIntervalMin !== undefined) {
      output.writeFieldBegin('throttledReminderIntervalMin', Thrift.Type.I32, 8);
      output.writeI32(this.throttledReminderIntervalMin);
      output.writeFieldEnd();
    }
    if (this.showPremiumInfoParts !== null && this.showPremiumInfoParts !== undefined) {
      output.writeFieldBegin('showPremiumInfoParts', Thrift.Type.STRING, 9);
      output.writeString(this.showPremiumInfoParts);
      output.writeFieldEnd();
    }
    if (this.statusUri !== null && this.statusUri !== undefined) {
      output.writeFieldBegin('statusUri', Thrift.Type.STRING, 10);
      output.writeString(this.statusUri);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.Info2 = class {
  constructor(args) {
    this.gateways = null;
    this.showURL = null;
    this.externalInfo = null;
    this.premium = null;
    this.adBoxInfo = null;
    this.forceUpgradeVersion = null;
    this.throttledReminderIntervalMin = null;
    this.showPremiumInfoParts = null;
    this.statusUri = null;
    this.cgAuthenticatedUser = null;
    this.cgFreeTimeResetSec = null;
    this.cgFreeTimeMaxDurationSec = null;
    this.cgFreeTimeResetIntervalDurationSec = null;
    if (args) {
      if (args.gateways !== undefined && args.gateways !== null) {
        this.gateways = Thrift.copyList(args.gateways, [Communication.Client.Gateway2]);
      }
      if (args.showURL !== undefined && args.showURL !== null) {
        this.showURL = args.showURL;
      }
      if (args.externalInfo !== undefined && args.externalInfo !== null) {
        this.externalInfo = new Communication.Client.ExternalInfo(args.externalInfo);
      }
      if (args.premium !== undefined && args.premium !== null) {
        this.premium = args.premium;
      }
      if (args.adBoxInfo !== undefined && args.adBoxInfo !== null) {
        this.adBoxInfo = new Communication.Client.AdBoxInfo(args.adBoxInfo);
      }
      if (args.forceUpgradeVersion !== undefined && args.forceUpgradeVersion !== null) {
        this.forceUpgradeVersion = args.forceUpgradeVersion;
      }
      if (args.throttledReminderIntervalMin !== undefined && args.throttledReminderIntervalMin !== null) {
        this.throttledReminderIntervalMin = args.throttledReminderIntervalMin;
      }
      if (args.showPremiumInfoParts !== undefined && args.showPremiumInfoParts !== null) {
        this.showPremiumInfoParts = args.showPremiumInfoParts;
      }
      if (args.statusUri !== undefined && args.statusUri !== null) {
        this.statusUri = args.statusUri;
      }
      if (args.cgAuthenticatedUser !== undefined && args.cgAuthenticatedUser !== null) {
        this.cgAuthenticatedUser = args.cgAuthenticatedUser;
      }
      if (args.cgFreeTimeResetSec !== undefined && args.cgFreeTimeResetSec !== null) {
        this.cgFreeTimeResetSec = args.cgFreeTimeResetSec;
      }
      if (args.cgFreeTimeMaxDurationSec !== undefined && args.cgFreeTimeMaxDurationSec !== null) {
        this.cgFreeTimeMaxDurationSec = args.cgFreeTimeMaxDurationSec;
      }
      if (args.cgFreeTimeResetIntervalDurationSec !== undefined && args.cgFreeTimeResetIntervalDurationSec !== null) {
        this.cgFreeTimeResetIntervalDurationSec = args.cgFreeTimeResetIntervalDurationSec;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.gateways = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = new Communication.Client.Gateway2();
            elem13.read(input);
            this.gateways.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.showURL = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.externalInfo = new Communication.Client.ExternalInfo();
          this.externalInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.premium = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.adBoxInfo = new Communication.Client.AdBoxInfo();
          this.adBoxInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.forceUpgradeVersion = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.throttledReminderIntervalMin = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.showPremiumInfoParts = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.statusUri = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.BOOL) {
          this.cgAuthenticatedUser = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.cgFreeTimeResetSec = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I32) {
          this.cgFreeTimeMaxDurationSec = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I32) {
          this.cgFreeTimeResetIntervalDurationSec = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Info2');
    if (this.gateways !== null && this.gateways !== undefined) {
      output.writeFieldBegin('gateways', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.gateways.length);
      for (let iter14 in this.gateways) {
        if (this.gateways.hasOwnProperty(iter14)) {
          iter14 = this.gateways[iter14];
          iter14.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.showURL !== null && this.showURL !== undefined) {
      output.writeFieldBegin('showURL', Thrift.Type.STRING, 3);
      output.writeString(this.showURL);
      output.writeFieldEnd();
    }
    if (this.externalInfo !== null && this.externalInfo !== undefined) {
      output.writeFieldBegin('externalInfo', Thrift.Type.STRUCT, 4);
      this.externalInfo.write(output);
      output.writeFieldEnd();
    }
    if (this.premium !== null && this.premium !== undefined) {
      output.writeFieldBegin('premium', Thrift.Type.BOOL, 5);
      output.writeBool(this.premium);
      output.writeFieldEnd();
    }
    if (this.adBoxInfo !== null && this.adBoxInfo !== undefined) {
      output.writeFieldBegin('adBoxInfo', Thrift.Type.STRUCT, 6);
      this.adBoxInfo.write(output);
      output.writeFieldEnd();
    }
    if (this.forceUpgradeVersion !== null && this.forceUpgradeVersion !== undefined) {
      output.writeFieldBegin('forceUpgradeVersion', Thrift.Type.STRING, 7);
      output.writeString(this.forceUpgradeVersion);
      output.writeFieldEnd();
    }
    if (this.throttledReminderIntervalMin !== null && this.throttledReminderIntervalMin !== undefined) {
      output.writeFieldBegin('throttledReminderIntervalMin', Thrift.Type.I32, 8);
      output.writeI32(this.throttledReminderIntervalMin);
      output.writeFieldEnd();
    }
    if (this.showPremiumInfoParts !== null && this.showPremiumInfoParts !== undefined) {
      output.writeFieldBegin('showPremiumInfoParts', Thrift.Type.STRING, 9);
      output.writeString(this.showPremiumInfoParts);
      output.writeFieldEnd();
    }
    if (this.statusUri !== null && this.statusUri !== undefined) {
      output.writeFieldBegin('statusUri', Thrift.Type.STRING, 10);
      output.writeString(this.statusUri);
      output.writeFieldEnd();
    }
    if (this.cgAuthenticatedUser !== null && this.cgAuthenticatedUser !== undefined) {
      output.writeFieldBegin('cgAuthenticatedUser', Thrift.Type.BOOL, 11);
      output.writeBool(this.cgAuthenticatedUser);
      output.writeFieldEnd();
    }
    if (this.cgFreeTimeResetSec !== null && this.cgFreeTimeResetSec !== undefined) {
      output.writeFieldBegin('cgFreeTimeResetSec', Thrift.Type.I32, 12);
      output.writeI32(this.cgFreeTimeResetSec);
      output.writeFieldEnd();
    }
    if (this.cgFreeTimeMaxDurationSec !== null && this.cgFreeTimeMaxDurationSec !== undefined) {
      output.writeFieldBegin('cgFreeTimeMaxDurationSec', Thrift.Type.I32, 13);
      output.writeI32(this.cgFreeTimeMaxDurationSec);
      output.writeFieldEnd();
    }
    if (this.cgFreeTimeResetIntervalDurationSec !== null && this.cgFreeTimeResetIntervalDurationSec !== undefined) {
      output.writeFieldBegin('cgFreeTimeResetIntervalDurationSec', Thrift.Type.I32, 14);
      output.writeI32(this.cgFreeTimeResetIntervalDurationSec);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.Info3 = class {
  constructor(args) {
    this.gateways = null;
    this.showURL = null;
    this.externalInfo = null;
    this.premium = null;
    this.adBoxInfo = null;
    this.forceUpgradeVersion = null;
    this.throttledReminderIntervalMin = null;
    this.showPremiumInfoParts = null;
    this.statusUri = null;
    this.cgAuthenticatedUser = null;
    this.cgFreeTimeResetSec = null;
    this.cgFreeTimeMaxDurationSec = null;
    this.cgFreeTimeResetIntervalDurationSec = null;
    this.showPremiumTrialOffer = null;
    if (args) {
      if (args.gateways !== undefined && args.gateways !== null) {
        this.gateways = Thrift.copyList(args.gateways, [Communication.Client.Gateway3]);
      }
      if (args.showURL !== undefined && args.showURL !== null) {
        this.showURL = args.showURL;
      }
      if (args.externalInfo !== undefined && args.externalInfo !== null) {
        this.externalInfo = new Communication.Client.ExternalInfo(args.externalInfo);
      }
      if (args.premium !== undefined && args.premium !== null) {
        this.premium = args.premium;
      }
      if (args.adBoxInfo !== undefined && args.adBoxInfo !== null) {
        this.adBoxInfo = new Communication.Client.AdBoxInfo(args.adBoxInfo);
      }
      if (args.forceUpgradeVersion !== undefined && args.forceUpgradeVersion !== null) {
        this.forceUpgradeVersion = args.forceUpgradeVersion;
      }
      if (args.throttledReminderIntervalMin !== undefined && args.throttledReminderIntervalMin !== null) {
        this.throttledReminderIntervalMin = args.throttledReminderIntervalMin;
      }
      if (args.showPremiumInfoParts !== undefined && args.showPremiumInfoParts !== null) {
        this.showPremiumInfoParts = args.showPremiumInfoParts;
      }
      if (args.statusUri !== undefined && args.statusUri !== null) {
        this.statusUri = args.statusUri;
      }
      if (args.cgAuthenticatedUser !== undefined && args.cgAuthenticatedUser !== null) {
        this.cgAuthenticatedUser = args.cgAuthenticatedUser;
      }
      if (args.cgFreeTimeResetSec !== undefined && args.cgFreeTimeResetSec !== null) {
        this.cgFreeTimeResetSec = args.cgFreeTimeResetSec;
      }
      if (args.cgFreeTimeMaxDurationSec !== undefined && args.cgFreeTimeMaxDurationSec !== null) {
        this.cgFreeTimeMaxDurationSec = args.cgFreeTimeMaxDurationSec;
      }
      if (args.cgFreeTimeResetIntervalDurationSec !== undefined && args.cgFreeTimeResetIntervalDurationSec !== null) {
        this.cgFreeTimeResetIntervalDurationSec = args.cgFreeTimeResetIntervalDurationSec;
      }
      if (args.showPremiumTrialOffer !== undefined && args.showPremiumTrialOffer !== null) {
        this.showPremiumTrialOffer = args.showPremiumTrialOffer;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.gateways = [];
          const _rtmp316 = input.readListBegin();
          const _size15 = _rtmp316.size || 0;
          for (let _i17 = 0; _i17 < _size15; ++_i17) {
            let elem18 = null;
            elem18 = new Communication.Client.Gateway3();
            elem18.read(input);
            this.gateways.push(elem18);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.showURL = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.externalInfo = new Communication.Client.ExternalInfo();
          this.externalInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.premium = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.adBoxInfo = new Communication.Client.AdBoxInfo();
          this.adBoxInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.forceUpgradeVersion = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.throttledReminderIntervalMin = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.showPremiumInfoParts = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.statusUri = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.BOOL) {
          this.cgAuthenticatedUser = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.cgFreeTimeResetSec = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I32) {
          this.cgFreeTimeMaxDurationSec = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I32) {
          this.cgFreeTimeResetIntervalDurationSec = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.BOOL) {
          this.showPremiumTrialOffer = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Info3');
    if (this.gateways !== null && this.gateways !== undefined) {
      output.writeFieldBegin('gateways', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.gateways.length);
      for (let iter19 in this.gateways) {
        if (this.gateways.hasOwnProperty(iter19)) {
          iter19 = this.gateways[iter19];
          iter19.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.showURL !== null && this.showURL !== undefined) {
      output.writeFieldBegin('showURL', Thrift.Type.STRING, 3);
      output.writeString(this.showURL);
      output.writeFieldEnd();
    }
    if (this.externalInfo !== null && this.externalInfo !== undefined) {
      output.writeFieldBegin('externalInfo', Thrift.Type.STRUCT, 4);
      this.externalInfo.write(output);
      output.writeFieldEnd();
    }
    if (this.premium !== null && this.premium !== undefined) {
      output.writeFieldBegin('premium', Thrift.Type.BOOL, 5);
      output.writeBool(this.premium);
      output.writeFieldEnd();
    }
    if (this.adBoxInfo !== null && this.adBoxInfo !== undefined) {
      output.writeFieldBegin('adBoxInfo', Thrift.Type.STRUCT, 6);
      this.adBoxInfo.write(output);
      output.writeFieldEnd();
    }
    if (this.forceUpgradeVersion !== null && this.forceUpgradeVersion !== undefined) {
      output.writeFieldBegin('forceUpgradeVersion', Thrift.Type.STRING, 7);
      output.writeString(this.forceUpgradeVersion);
      output.writeFieldEnd();
    }
    if (this.throttledReminderIntervalMin !== null && this.throttledReminderIntervalMin !== undefined) {
      output.writeFieldBegin('throttledReminderIntervalMin', Thrift.Type.I32, 8);
      output.writeI32(this.throttledReminderIntervalMin);
      output.writeFieldEnd();
    }
    if (this.showPremiumInfoParts !== null && this.showPremiumInfoParts !== undefined) {
      output.writeFieldBegin('showPremiumInfoParts', Thrift.Type.STRING, 9);
      output.writeString(this.showPremiumInfoParts);
      output.writeFieldEnd();
    }
    if (this.statusUri !== null && this.statusUri !== undefined) {
      output.writeFieldBegin('statusUri', Thrift.Type.STRING, 10);
      output.writeString(this.statusUri);
      output.writeFieldEnd();
    }
    if (this.cgAuthenticatedUser !== null && this.cgAuthenticatedUser !== undefined) {
      output.writeFieldBegin('cgAuthenticatedUser', Thrift.Type.BOOL, 11);
      output.writeBool(this.cgAuthenticatedUser);
      output.writeFieldEnd();
    }
    if (this.cgFreeTimeResetSec !== null && this.cgFreeTimeResetSec !== undefined) {
      output.writeFieldBegin('cgFreeTimeResetSec', Thrift.Type.I32, 12);
      output.writeI32(this.cgFreeTimeResetSec);
      output.writeFieldEnd();
    }
    if (this.cgFreeTimeMaxDurationSec !== null && this.cgFreeTimeMaxDurationSec !== undefined) {
      output.writeFieldBegin('cgFreeTimeMaxDurationSec', Thrift.Type.I32, 13);
      output.writeI32(this.cgFreeTimeMaxDurationSec);
      output.writeFieldEnd();
    }
    if (this.cgFreeTimeResetIntervalDurationSec !== null && this.cgFreeTimeResetIntervalDurationSec !== undefined) {
      output.writeFieldBegin('cgFreeTimeResetIntervalDurationSec', Thrift.Type.I32, 14);
      output.writeI32(this.cgFreeTimeResetIntervalDurationSec);
      output.writeFieldEnd();
    }
    if (this.showPremiumTrialOffer !== null && this.showPremiumTrialOffer !== undefined) {
      output.writeFieldBegin('showPremiumTrialOffer', Thrift.Type.BOOL, 15);
      output.writeBool(this.showPremiumTrialOffer);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.UserCredentials = class {
  constructor(args) {
    this.user = null;
    this.passwordPlain = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.passwordPlain !== undefined && args.passwordPlain !== null) {
        this.passwordPlain = args.passwordPlain;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.user = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.passwordPlain = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('UserCredentials');
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.I32, 1);
      output.writeI32(this.user);
      output.writeFieldEnd();
    }
    if (this.passwordPlain !== null && this.passwordPlain !== undefined) {
      output.writeFieldBegin('passwordPlain', Thrift.Type.STRING, 2);
      output.writeString(this.passwordPlain);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.GenericException = class {
  constructor(args) {
    this.xmessage = null;
    if (args) {
      if (args.xmessage !== undefined && args.xmessage !== null) {
        this.xmessage = args.xmessage;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.xmessage = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GenericException');
    if (this.xmessage !== null && this.xmessage !== undefined) {
      output.writeFieldBegin('xmessage', Thrift.Type.STRING, 1);
      output.writeString(this.xmessage);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.GenericException2 = class {
  constructor(args) {
    this.xmessage = null;
    this.uri = null;
    if (args) {
      if (args.xmessage !== undefined && args.xmessage !== null) {
        this.xmessage = args.xmessage;
      }
      if (args.uri !== undefined && args.uri !== null) {
        this.uri = args.uri;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.xmessage = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.uri = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GenericException2');
    if (this.xmessage !== null && this.xmessage !== undefined) {
      output.writeFieldBegin('xmessage', Thrift.Type.STRING, 1);
      output.writeString(this.xmessage);
      output.writeFieldEnd();
    }
    if (this.uri !== null && this.uri !== undefined) {
      output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
      output.writeString(this.uri);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.AlreadyPremiumException = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AlreadyPremiumException');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
