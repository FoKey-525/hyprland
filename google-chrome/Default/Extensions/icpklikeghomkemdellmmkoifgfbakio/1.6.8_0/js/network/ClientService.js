//
// Autogenerated by Thrift Compiler (0.20.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import {Thrift} from "./thrift.js";

if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}

import {Communication} from "./client_types.js";

//HELPER FUNCTIONS AND STRUCTURES

Communication.Client.ClientService_Info4_args = class {
  constructor(args) {
    this.user = null;
    this.password = null;
    this.clientVersion = null;
    this.langID = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.clientVersion !== undefined && args.clientVersion !== null) {
        this.clientVersion = args.clientVersion;
      }
      if (args.langID !== undefined && args.langID !== null) {
        this.langID = args.langID;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.user = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.clientVersion = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.langID = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Info4_args');
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.I32, 1);
      output.writeI32(this.user);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.clientVersion !== null && this.clientVersion !== undefined) {
      output.writeFieldBegin('clientVersion', Thrift.Type.STRING, 3);
      output.writeString(this.clientVersion);
      output.writeFieldEnd();
    }
    if (this.langID !== null && this.langID !== undefined) {
      output.writeFieldBegin('langID', Thrift.Type.STRING, 4);
      output.writeString(this.langID);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_Info4_result = class {
  constructor(args) {
    this.success = null;
    this.ge = null;
    if (args instanceof Communication.Client.GenericException) {
        this.ge = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new Communication.Client.Info(args.success);
      }
      if (args.ge !== undefined && args.ge !== null) {
        this.ge = args.ge;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new Communication.Client.Info();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ge = new Communication.Client.GenericException();
          this.ge.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Info4_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ge !== null && this.ge !== undefined) {
      output.writeFieldBegin('ge', Thrift.Type.STRUCT, 1);
      this.ge.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_Info5_args = class {
  constructor(args) {
    this.user = null;
    this.password = null;
    this.clientVersion = null;
    this.langID = null;
    this.OS = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.clientVersion !== undefined && args.clientVersion !== null) {
        this.clientVersion = args.clientVersion;
      }
      if (args.langID !== undefined && args.langID !== null) {
        this.langID = args.langID;
      }
      if (args.OS !== undefined && args.OS !== null) {
        this.OS = args.OS;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.user = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.clientVersion = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.langID = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.OS = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Info5_args');
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.I32, 1);
      output.writeI32(this.user);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.clientVersion !== null && this.clientVersion !== undefined) {
      output.writeFieldBegin('clientVersion', Thrift.Type.STRING, 3);
      output.writeString(this.clientVersion);
      output.writeFieldEnd();
    }
    if (this.langID !== null && this.langID !== undefined) {
      output.writeFieldBegin('langID', Thrift.Type.STRING, 4);
      output.writeString(this.langID);
      output.writeFieldEnd();
    }
    if (this.OS !== null && this.OS !== undefined) {
      output.writeFieldBegin('OS', Thrift.Type.STRING, 5);
      output.writeString(this.OS);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_Info5_result = class {
  constructor(args) {
    this.success = null;
    this.ge = null;
    if (args instanceof Communication.Client.GenericException2) {
        this.ge = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new Communication.Client.Info(args.success);
      }
      if (args.ge !== undefined && args.ge !== null) {
        this.ge = args.ge;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new Communication.Client.Info();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ge = new Communication.Client.GenericException2();
          this.ge.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Info5_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ge !== null && this.ge !== undefined) {
      output.writeFieldBegin('ge', Thrift.Type.STRUCT, 1);
      this.ge.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_Info6_args = class {
  constructor(args) {
    this.user = null;
    this.password = null;
    this.clientVersion = null;
    this.langID = null;
    this.OS = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.clientVersion !== undefined && args.clientVersion !== null) {
        this.clientVersion = args.clientVersion;
      }
      if (args.langID !== undefined && args.langID !== null) {
        this.langID = args.langID;
      }
      if (args.OS !== undefined && args.OS !== null) {
        this.OS = args.OS;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.user = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.clientVersion = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.langID = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.OS = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Info6_args');
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.I32, 1);
      output.writeI32(this.user);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.clientVersion !== null && this.clientVersion !== undefined) {
      output.writeFieldBegin('clientVersion', Thrift.Type.STRING, 3);
      output.writeString(this.clientVersion);
      output.writeFieldEnd();
    }
    if (this.langID !== null && this.langID !== undefined) {
      output.writeFieldBegin('langID', Thrift.Type.STRING, 4);
      output.writeString(this.langID);
      output.writeFieldEnd();
    }
    if (this.OS !== null && this.OS !== undefined) {
      output.writeFieldBegin('OS', Thrift.Type.STRING, 5);
      output.writeString(this.OS);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_Info6_result = class {
  constructor(args) {
    this.success = null;
    this.ge = null;
    if (args instanceof Communication.Client.GenericException2) {
        this.ge = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new Communication.Client.Info2(args.success);
      }
      if (args.ge !== undefined && args.ge !== null) {
        this.ge = args.ge;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new Communication.Client.Info2();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ge = new Communication.Client.GenericException2();
          this.ge.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Info6_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ge !== null && this.ge !== undefined) {
      output.writeFieldBegin('ge', Thrift.Type.STRUCT, 1);
      this.ge.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_Info7_args = class {
  constructor(args) {
    this.user = null;
    this.password = null;
    this.clientVersion = null;
    this.langID = null;
    this.OS = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.clientVersion !== undefined && args.clientVersion !== null) {
        this.clientVersion = args.clientVersion;
      }
      if (args.langID !== undefined && args.langID !== null) {
        this.langID = args.langID;
      }
      if (args.OS !== undefined && args.OS !== null) {
        this.OS = args.OS;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.user = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.clientVersion = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.langID = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.OS = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Info7_args');
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.I32, 1);
      output.writeI32(this.user);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.clientVersion !== null && this.clientVersion !== undefined) {
      output.writeFieldBegin('clientVersion', Thrift.Type.STRING, 3);
      output.writeString(this.clientVersion);
      output.writeFieldEnd();
    }
    if (this.langID !== null && this.langID !== undefined) {
      output.writeFieldBegin('langID', Thrift.Type.STRING, 4);
      output.writeString(this.langID);
      output.writeFieldEnd();
    }
    if (this.OS !== null && this.OS !== undefined) {
      output.writeFieldBegin('OS', Thrift.Type.STRING, 5);
      output.writeString(this.OS);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_Info7_result = class {
  constructor(args) {
    this.success = null;
    this.ge = null;
    if (args instanceof Communication.Client.GenericException2) {
        this.ge = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new Communication.Client.Info3(args.success);
      }
      if (args.ge !== undefined && args.ge !== null) {
        this.ge = args.ge;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new Communication.Client.Info3();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ge = new Communication.Client.GenericException2();
          this.ge.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Info7_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ge !== null && this.ge !== undefined) {
      output.writeFieldBegin('ge', Thrift.Type.STRUCT, 1);
      this.ge.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_GetAccount_args = class {
  constructor(args) {
    this.refererCodeID = 0;
    if (args) {
      if (args.refererCodeID !== undefined && args.refererCodeID !== null) {
        this.refererCodeID = args.refererCodeID;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.refererCodeID = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_GetAccount_args');
    if (this.refererCodeID !== null && this.refererCodeID !== undefined) {
      output.writeFieldBegin('refererCodeID', Thrift.Type.I32, 1);
      output.writeI32(this.refererCodeID);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_GetAccount_result = class {
  constructor(args) {
    this.success = null;
    this.ge = null;
    if (args instanceof Communication.Client.GenericException) {
        this.ge = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new Communication.Client.UserCredentials(args.success);
      }
      if (args.ge !== undefined && args.ge !== null) {
        this.ge = args.ge;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new Communication.Client.UserCredentials();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ge = new Communication.Client.GenericException();
          this.ge.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_GetAccount_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ge !== null && this.ge !== undefined) {
      output.writeFieldBegin('ge', Thrift.Type.STRUCT, 1);
      this.ge.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_GetAccount2_args = class {
  constructor(args) {
    this.refererCodeID = 0;
    if (args) {
      if (args.refererCodeID !== undefined && args.refererCodeID !== null) {
        this.refererCodeID = args.refererCodeID;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.refererCodeID = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_GetAccount2_args');
    if (this.refererCodeID !== null && this.refererCodeID !== undefined) {
      output.writeFieldBegin('refererCodeID', Thrift.Type.I32, 1);
      output.writeI32(this.refererCodeID);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_GetAccount2_result = class {
  constructor(args) {
    this.success = null;
    this.ge = null;
    if (args instanceof Communication.Client.GenericException2) {
        this.ge = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new Communication.Client.UserCredentials(args.success);
      }
      if (args.ge !== undefined && args.ge !== null) {
        this.ge = args.ge;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new Communication.Client.UserCredentials();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ge = new Communication.Client.GenericException2();
          this.ge.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_GetAccount2_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ge !== null && this.ge !== undefined) {
      output.writeFieldBegin('ge', Thrift.Type.STRUCT, 1);
      this.ge.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_Log_args = class {
  constructor(args) {
    this.type = null;
    this.section = null;
    this.message = null;
    this.user = 0;
    this.versions = '';
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.section !== undefined && args.section !== null) {
        this.section = args.section;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.versions !== undefined && args.versions !== null) {
        this.versions = args.versions;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.type = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.section = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.user = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.versions = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Log_args');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.STRING, 1);
      output.writeString(this.type);
      output.writeFieldEnd();
    }
    if (this.section !== null && this.section !== undefined) {
      output.writeFieldBegin('section', Thrift.Type.STRING, 2);
      output.writeString(this.section);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 3);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.I32, 4);
      output.writeI32(this.user);
      output.writeFieldEnd();
    }
    if (this.versions !== null && this.versions !== undefined) {
      output.writeFieldBegin('versions', Thrift.Type.STRING, 5);
      output.writeString(this.versions);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_Log_result = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_Log_result');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_ActivatePremium_args = class {
  constructor(args) {
    this.Code = null;
    this.user = null;
    this.password = null;
    this.langID = null;
    if (args) {
      if (args.Code !== undefined && args.Code !== null) {
        this.Code = args.Code;
      }
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.langID !== undefined && args.langID !== null) {
        this.langID = args.langID;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.Code = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.user = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.langID = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_ActivatePremium_args');
    if (this.Code !== null && this.Code !== undefined) {
      output.writeFieldBegin('Code', Thrift.Type.STRING, 1);
      output.writeString(this.Code);
      output.writeFieldEnd();
    }
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.I32, 2);
      output.writeI32(this.user);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 3);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.langID !== null && this.langID !== undefined) {
      output.writeFieldBegin('langID', Thrift.Type.STRING, 4);
      output.writeString(this.langID);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_ActivatePremium_result = class {
  constructor(args) {
    this.ge = null;
    if (args instanceof Communication.Client.GenericException2) {
        this.ge = args;
        return;
    }
    if (args) {
      if (args.ge !== undefined && args.ge !== null) {
        this.ge = args.ge;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ge = new Communication.Client.GenericException2();
          this.ge.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_ActivatePremium_result');
    if (this.ge !== null && this.ge !== undefined) {
      output.writeFieldBegin('ge', Thrift.Type.STRUCT, 1);
      this.ge.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_FreeTimeSync_args = class {
  constructor(args) {
    this.user = null;
    this.password = null;
    this.decrement = true;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.decrement !== undefined && args.decrement !== null) {
        this.decrement = args.decrement;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.user = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.decrement = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_FreeTimeSync_args');
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.I32, 1);
      output.writeI32(this.user);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.decrement !== null && this.decrement !== undefined) {
      output.writeFieldBegin('decrement', Thrift.Type.BOOL, 3);
      output.writeBool(this.decrement);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_FreeTimeSync_result = class {
  constructor(args) {
    this.success = null;
    this.ge = null;
    this.ape = null;
    if (args instanceof Communication.Client.GenericException2) {
        this.ge = args;
        return;
    }
    if (args instanceof Communication.Client.AlreadyPremiumException) {
        this.ape = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ge !== undefined && args.ge !== null) {
        this.ge = args.ge;
      }
      if (args.ape !== undefined && args.ape !== null) {
        this.ape = args.ape;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ge = new Communication.Client.GenericException2();
          this.ge.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ape = new Communication.Client.AlreadyPremiumException();
          this.ape.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_FreeTimeSync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    if (this.ge !== null && this.ge !== undefined) {
      output.writeFieldBegin('ge', Thrift.Type.STRUCT, 1);
      this.ge.write(output);
      output.writeFieldEnd();
    }
    if (this.ape !== null && this.ape !== undefined) {
      output.writeFieldBegin('ape', Thrift.Type.STRUCT, 2);
      this.ape.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_FreeUserVerification_args = class {
  constructor(args) {
    this.user = null;
    this.password = null;
    this.verificationID = null;
    this.verificationToken = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = args.user;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.verificationID !== undefined && args.verificationID !== null) {
        this.verificationID = args.verificationID;
      }
      if (args.verificationToken !== undefined && args.verificationToken !== null) {
        this.verificationToken = args.verificationToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.user = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.verificationID = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.verificationToken = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_FreeUserVerification_args');
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.I32, 1);
      output.writeI32(this.user);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.verificationID !== null && this.verificationID !== undefined) {
      output.writeFieldBegin('verificationID', Thrift.Type.STRING, 3);
      output.writeString(this.verificationID);
      output.writeFieldEnd();
    }
    if (this.verificationToken !== null && this.verificationToken !== undefined) {
      output.writeFieldBegin('verificationToken', Thrift.Type.STRING, 4);
      output.writeString(this.verificationToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientService_FreeUserVerification_result = class {
  constructor(args) {
    this.ge = null;
    if (args instanceof Communication.Client.GenericException2) {
        this.ge = args;
        return;
    }
    if (args) {
      if (args.ge !== undefined && args.ge !== null) {
        this.ge = args.ge;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ge = new Communication.Client.GenericException2();
          this.ge.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientService_FreeUserVerification_result');
    if (this.ge !== null && this.ge !== undefined) {
      output.writeFieldBegin('ge', Thrift.Type.STRUCT, 1);
      this.ge.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Communication.Client.ClientServiceClient = class ClientServiceClient {
  constructor(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
  }

  Info4 (user, password, clientVersion, langID) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_Info4(user, password, clientVersion, langID, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_Info4 (user, password, clientVersion, langID, callback) {
    const params = {
      user: user,
      password: password,
      clientVersion: clientVersion,
      langID: langID
    };
    const args = new Communication.Client.ClientService_Info4_args(params);
    try {
      this.output.writeMessageBegin('Info4', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_Info4();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_Info4 () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_Info4_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ge) {
      throw result.ge;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'Info4 failed: unknown result';
  }

  Info5 (user, password, clientVersion, langID, OS) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_Info5(user, password, clientVersion, langID, OS, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_Info5 (user, password, clientVersion, langID, OS, callback) {
    const params = {
      user: user,
      password: password,
      clientVersion: clientVersion,
      langID: langID,
      OS: OS
    };
    const args = new Communication.Client.ClientService_Info5_args(params);
    try {
      this.output.writeMessageBegin('Info5', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_Info5();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_Info5 () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_Info5_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ge) {
      throw result.ge;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'Info5 failed: unknown result';
  }

  Info6 (user, password, clientVersion, langID, OS) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_Info6(user, password, clientVersion, langID, OS, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_Info6 (user, password, clientVersion, langID, OS, callback) {
    const params = {
      user: user,
      password: password,
      clientVersion: clientVersion,
      langID: langID,
      OS: OS
    };
    const args = new Communication.Client.ClientService_Info6_args(params);
    try {
      this.output.writeMessageBegin('Info6', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_Info6();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_Info6 () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_Info6_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ge) {
      throw result.ge;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'Info6 failed: unknown result';
  }

  Info7 (user, password, clientVersion, langID, OS) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_Info7(user, password, clientVersion, langID, OS, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_Info7 (user, password, clientVersion, langID, OS, callback) {
    const params = {
      user: user,
      password: password,
      clientVersion: clientVersion,
      langID: langID,
      OS: OS
    };
    const args = new Communication.Client.ClientService_Info7_args(params);
    try {
      this.output.writeMessageBegin('Info7', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_Info7();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_Info7 () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_Info7_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ge) {
      throw result.ge;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'Info7 failed: unknown result';
  }

  GetAccount (refererCodeID) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_GetAccount(refererCodeID, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_GetAccount (refererCodeID, callback) {
    const params = {
      refererCodeID: refererCodeID
    };
    const args = new Communication.Client.ClientService_GetAccount_args(params);
    try {
      this.output.writeMessageBegin('GetAccount', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_GetAccount();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_GetAccount () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_GetAccount_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ge) {
      throw result.ge;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'GetAccount failed: unknown result';
  }

  GetAccount2 (refererCodeID) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_GetAccount2(refererCodeID, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_GetAccount2 (refererCodeID, callback) {
    const params = {
      refererCodeID: refererCodeID
    };
    const args = new Communication.Client.ClientService_GetAccount2_args(params);
    try {
      this.output.writeMessageBegin('GetAccount2', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_GetAccount2();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_GetAccount2 () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_GetAccount2_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ge) {
      throw result.ge;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'GetAccount2 failed: unknown result';
  }

  Log (type, section, message, user, versions) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_Log(type, section, message, user, versions, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_Log (type, section, message, user, versions, callback) {
    const params = {
      type: type,
      section: section,
      message: message,
      user: user,
      versions: versions
    };
    const args = new Communication.Client.ClientService_Log_args(params);
    try {
      this.output.writeMessageBegin('Log', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_Log();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_Log () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_Log_result();
    result.read(this.input);
    this.input.readMessageEnd();

    return;
  }

  ActivatePremium (Code, user, password, langID) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_ActivatePremium(Code, user, password, langID, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_ActivatePremium (Code, user, password, langID, callback) {
    const params = {
      Code: Code,
      user: user,
      password: password,
      langID: langID
    };
    const args = new Communication.Client.ClientService_ActivatePremium_args(params);
    try {
      this.output.writeMessageBegin('ActivatePremium', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_ActivatePremium();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_ActivatePremium () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_ActivatePremium_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ge) {
      throw result.ge;
    }
    return;
  }

  FreeTimeSync (user, password, decrement) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_FreeTimeSync(user, password, decrement, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_FreeTimeSync (user, password, decrement, callback) {
    const params = {
      user: user,
      password: password,
      decrement: decrement
    };
    const args = new Communication.Client.ClientService_FreeTimeSync_args(params);
    try {
      this.output.writeMessageBegin('FreeTimeSync', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_FreeTimeSync();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_FreeTimeSync () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_FreeTimeSync_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ge) {
      throw result.ge;
    }
    if (null !== result.ape) {
      throw result.ape;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'FreeTimeSync failed: unknown result';
  }

  FreeUserVerification (user, password, verificationID, verificationToken) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_FreeUserVerification(user, password, verificationID, verificationToken, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_FreeUserVerification (user, password, verificationID, verificationToken, callback) {
    const params = {
      user: user,
      password: password,
      verificationID: verificationID,
      verificationToken: verificationToken
    };
    const args = new Communication.Client.ClientService_FreeUserVerification_args(params);
    try {
      this.output.writeMessageBegin('FreeUserVerification', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_FreeUserVerification();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_FreeUserVerification () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new Communication.Client.ClientService_FreeUserVerification_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.ge) {
      throw result.ge;
    }
    return;
  }
};

export {Communication};